(this["webpackJsonpanymay-app"]=this["webpackJsonpanymay-app"]||[]).push([[154],{1515:function(e,a,n){"use strict";var t=n(1),o=n(0),i=(n(3),n(8)),l=n(134),c=o.forwardRef((function(e,a){return o.createElement(l.a,Object(t.a)({component:"p",variant:"body1",color:"textSecondary",ref:a},e))}));a.a=Object(i.a)({root:{marginBottom:12}},{name:"MuiDialogContentText"})(c)},2650:function(e,a,n){"use strict";n.r(a);var t=n(127),o=n(413),i=n(1187),l=n(1186),c=n(1515),r=n(1185),s=n(134),m=n(0),g=n.n(m),p=n(5),u=n(304);a.default=function(e){var a=Object(p.c)();return g.a.createElement(g.a.Fragment,null,g.a.createElement(s.a,{variant:"h4",className:"mb-24"},"FuseDialog"),g.a.createElement(s.a,{className:"mb-16",component:"p"},g.a.createElement("code",null,"FuseDialog")," is a simple dialog trigger for easily showing dialog messages via redux action. It should be located in the theme layouts."),g.a.createElement(s.a,{className:"mt-32 mb-8",variant:"h5"},"Usage"),g.a.createElement(s.a,{className:"mb-16",component:"p"},"You can show dialog anywhere with dispatching the action openDialog, it is using Material-UI's dialog so you can pass the props in the object:"),g.a.createElement(t.a,{component:"pre",className:"language-jsx"},'\n                        <Button\n                            onClick={()=> dispatch(openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id="alert-dialog-title">Use Google\'s location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id="alert-dialog-description">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={()=> dispatch(closeDialog())} color="primary">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={()=> dispatch(closeDialog())} color="primary" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                     )\n                                 }))}\n                            variant="contained"\n                            color="secondary"\n                        >\n                            Open Dialog\n                        </Button>\n                        '),g.a.createElement(s.a,{className:"mt-32 mb-8",variant:"h5"},"Example"),g.a.createElement(o.a,{onClick:function(){return a(Object(u.c)({children:g.a.createElement(g.a.Fragment,null,g.a.createElement(r.a,{id:"alert-dialog-title"},"Use Google's location service?"),g.a.createElement(l.a,null,g.a.createElement(c.a,{id:"alert-dialog-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),g.a.createElement(i.a,null,g.a.createElement(o.a,{onClick:function(){return a(Object(u.a)())},color:"primary"},"Disagree"),g.a.createElement(o.a,{onClick:function(){return a(Object(u.a)())},color:"primary",autoFocus:!0},"Agree")))}))},variant:"contained",color:"secondary"},"Open Dialog"))}}}]);